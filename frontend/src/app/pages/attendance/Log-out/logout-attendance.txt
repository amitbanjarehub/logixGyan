import React from "react";
import { Card, CardContent, TextField, Typography } from "@mui/material";
import FormControl from "@mui/material/FormControl";
import Box from "@mui/material/Box";
import Div from "@jumbo/shared/Div";
import Button from "@mui/material/Button";
import JumboDemoCard from "@jumbo/components/JumboDemoCard";
import Stack from "@mui/material/Stack";
import { IconButton } from "@mui/material";
import Grid from "@material-ui/core/Grid";
import { makeStyles } from "@material-ui/core/styles";
import PhotoCameraRoundedIcon from "@material-ui/icons/PhotoCameraRounded";
import { useState } from "react";
import { useGeolocated } from "react-geolocated";
import * as yup from "yup";
import { Form, Formik } from "formik";
import Resizer from "react-image-file-resizer";

let resetFormFunc = null;
const validationSchema = yup.object({
  addMilometerReading: yup
    .string("Add Milometer Reading")
    .required("Milometer Reading is required"),
});
const useStyles = makeStyles((theme) => ({
  root: {
    height: "100%",
    textAlign: "center",
  },

  input: {
    display: "none",
  },
}));

const Logout_attendance = () => {
  const classes = useStyles();

  const [source, setSource] = useState("");

 

  const resizeFile1 = (file) =>
    new Promise((resolve) => {
      Resizer.imageFileResizer(
        file,
        300,
        300,
        "JPEG",
        100,
        0,
        (uri) => {
          resolve(uri);
        },
        "base64"
      );
    });

  const handleCapture1 = async (target) => {
    if (target.files) {
      if (target.files.length !== 0) {
        try {
          const file = target.files[0];
          const image = await resizeFile1(file);
          console.log("image", image);
          function dataURLtoFile(dataurl, filename) {

            var arr = dataurl.split(','),
              mime = arr[0].match(/:(.*?);/)[1],
              bstr = atob(arr[1]),
              n = bstr.length,
              u8arr = new Uint8Array(n);

            while (n--) {
              u8arr[n] = bstr.charCodeAt(n);
            }

            return new File([u8arr], filename, { type: mime });
          }

          //Usage example:
          const file1 = dataURLtoFile(image, 'hello.jpeg');
          console.log("file1", file1);
          setSource(file1);
        } catch (err) {
          console.log(err);
        }

      }
    }
  }

  const resizeFile2 = (file) =>
    new Promise((resolve) => {
      Resizer.imageFileResizer(
        file,
        300,
        300,
        "JPEG",
        100,
        0,
        (uri) => {
          resolve(uri);
        },
        "base64"
      );
    });

  const handleCapture2 = async (target) => {
    if (target.files) {
      if (target.files.length !== 0) {
        try {
          const file = target.files[0];
          const image = await resizeFile2(file);
          console.log("image", image);
          function dataURLtoFile(dataurl, filename) {

            var arr = dataurl.split(','),
              mime = arr[0].match(/:(.*?);/)[1],
              bstr = atob(arr[1]),
              n = bstr.length,
              u8arr = new Uint8Array(n);

            while (n--) {
              u8arr[n] = bstr.charCodeAt(n);
            }

            return new File([u8arr], filename, { type: mime });
          }

          //Usage example:
          const file1 = dataURLtoFile(image, 'hello.jpeg');
          console.log("file1", file1);
          setSource(file1);
        } catch (err) {
          console.log(err);
        }

      }
    }
  }

  const { coords, isGeolocationAvailable, isGeolocationEnabled } =
    useGeolocated({
      positionOptions: {
        enableHighAccuracy: false,
      },
      userDecisionTimeout: 5000,
    });
  const onAdd = (addMilometerReading) => {
    Logout_attendance.allot({
      addMilometerReading,
    });
  };
  return (
    <React.Fragment>
      <Card sx={{ display: "flex", mb: 3.5 }}>
        <Div sx={{ display: "flex", flexDirection: "column", flex: "1" }}>
          <CardContent>
            <Formik
              validateOnChange={true}
              validationSchema={validationSchema}
              initialValues={{
                addMilometerReading: "",
              }}
              onSubmit={async (data, { setSubmitting, resetForm }) => {
                resetFormFunc = resetForm;
                setSubmitting(true);
                console.log("submitting");
                await onAdd(data.addMilometerReading);

                setSubmitting(false);
              }}
            >
              {({ isSubmitting }) => (
                <Box
                  component="form"
                  sx={{
                    mx: -1,

                    "& .MuiFormControl-root:not(.MuiTextField-root)": {
                      p: 1,
                      mb: 2,
                      width: { xs: "100%", sm: "50%" },
                    },

                    "& .MuiFormControl-root.MuiFormControl-fluid": {
                      width: "100%",
                    },
                  }}
                  autoComplete="off"
                >
                  <Typography component={"h2"} variant="h1" mb={3}>
                    Attendance
                  </Typography>
                  <FormControl className="MuiFormControl-fluid">
                    <input
                      type="file"
                      accept="image/*"
                      style={{ display: "none" }}
                      id="contained-button-file"
                    />
                    <label htmlFor="contained-button-file">
                      <JumboDemoCard
                        title={"Out Time Selfie"}
                        wrapperSx={{
                          backgroundColor: "background.paper",
                          pt: 0,
                        }}
                      >
                        <Stack direction="row" alignItems="center" spacing={2}>
                          {!isGeolocationAvailable ? (
                            <div>Your browser does not support Geolocation</div>
                          ) : !isGeolocationEnabled ? (
                            <div>Geolocation is not enabled</div>
                          ) : coords ? (
                            <div className={classes.root}>
                              <Grid container>
                                <Grid item xs={12}>
                                  <input
                                    accept="image/*"
                                    className={classes.input}
                                    id="icon-button-file"
                                    type="file"
                                    capture="environment"
                                    onChange={(e) => handleCapture1(e.target)}
                                  />

                                  <label htmlFor="icon-button-file">
                                    <IconButton
                                      color="primary"
                                      aria-label="upload picture"
                                      component="span"
                                    >
                                      <PhotoCameraRoundedIcon
                                        fontSize="large"
                                        color="primary"
                                      />
                                    </IconButton>
                                  </label>
                                </Grid>
                              </Grid>
                            </div>
                          ) : (
                            <div>Getting the location data&hellip; </div>
                          )}
                        </Stack>
                      </JumboDemoCard>
                    </label>
                    <br />
                    <label htmlFor="contained-button-file">
                      <JumboDemoCard
                        title={"Add Milometer Reading image"}
                        //demoCode={code}
                        wrapperSx={{
                          backgroundColor: "background.paper",
                          pt: 0,
                        }}
                      >
                        <Stack direction="row" alignItems="center" spacing={2}>
                          {!isGeolocationAvailable ? (
                            <div>Your browser does not support Geolocation</div>
                          ) : !isGeolocationEnabled ? (
                            <div>Geolocation is not enabled</div>
                          ) : coords ? (
                            <div className={classes.root}>
                              <Grid container>
                                <Grid item xs={12}>
                                  <input
                                    accept="image/*"
                                    className={classes.input}
                                    id="icon-button-file"
                                    type="file"
                                    capture="environment"
                                    onChange={(e) => handleCapture2(e.target)}
                                  />

                                  <label htmlFor="icon-button-file">
                                    <IconButton
                                      color="primary"
                                      aria-label="upload picture"
                                      component="span"
                                    >
                                      <PhotoCameraRoundedIcon
                                        fontSize="large"
                                        color="primary"
                                      />
                                    </IconButton>
                                  </label>
                                </Grid>
                              </Grid>
                            </div>
                          ) : (
                            <div>Getting the location data&hellip; </div>
                          )}
                        </Stack>
                      </JumboDemoCard>
                    </label>
                  </FormControl>
                  <FormControl className="MuiFormControl-fluid">
                    <TextField
                      required
                      fullWidth
                      id="AddMilometer"
                      label="Add Milometer Reading"
                    // defaultValue="Enter URL"
                    />
                  </FormControl>

                  <Div sx={{ mx: 1 }}>
                    <Button variant={"contained"}>Save</Button>
                  </Div>
                </Box>
              )}
            </Formik>
          </CardContent>
        </Div>
      </Card>
    </React.Fragment>
  );
};

export default Logout_attendance;
